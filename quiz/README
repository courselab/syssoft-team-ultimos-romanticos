#    SPDX-FileCopyrightText: 2021 Monaco F. J. <monaco@usp.br>
#    SPDX-FileCopyrightText: 2025 Arthur Pin <artP2@tuta.io>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later
#
#  This file is a derivative of SYSeg (https://gitlab.com/monaco/syseg)
#  and includes modifications made by the following author(s):
#  Arthur Pin <artP2@tuta.io>

 



 SysQuiz - A few quick questios.
 ==============================

 Some questions for your answer based on your knowledge of system software.
 Please, answer the questions in the file SOLVED.

 Provide objective, yet comprehensive answers. Be as didactic as possible,
 explaining the rationale and implementation details where applicable.

 Challenge
 ------------------------------

 Tip: Taking a look at the './Makefile' may be instructive.

 * p1.c      Explain the results.

   	     Build p1: make p1
		   
	     Execute it a few times and explain the results.
	     Explain didactically what the rationale for this behavior is.


 * p2.c	     Fix design vulnerability.

   	     Refer to p2.c and understand how the program works.

   	     Build p2: make p2

	     Execute the program and enter the correct input to pass the
	     verification check.

	     Then, rerun p2 and, when prompted, enter: youshallnotpass.

	     Explain the result and identify the design flaw that led to the
	     vulnerability.

	     Let's say your compiler does not implement stack protection
	     (shame on it). Discuss possible modifications in the source code
	     to make the program more robust with regard to buffer overflow.

	     Apply those modifications in a new program p2fix.c, and edit
	     the Makefile to build it (you can't use -fstack-protector).

	     Test the program and comment on the results.


 * p3	     Explain the function calls.

   	     Check p3.c and build p3 with: make p3.

	     Disassemble p3:  make p3/d

	     Locate the function 'main' (search for <main>).
	     For gcc vr. 11.4.0 the output is like this. Yours may vary
	     slightly if your gcc version is not the same but should not
	     be too different:

	      0804918d <main>:
	      804918d:       55                push   %ebp
 	      804918e:       89 e5             mov    %esp,%ebp
 	      8049190:       83 e4 f0          and    $0xfffffff0,%esp
	      8049193:       e8 07 00 00 00    call   804919f <foo>
	      8049198:       b8 00 00 00 00    mov    $0x0,%eax
	      804919d:       c9                leave  
	      804919e:       c3                ret    

 	      0804919f <foo>:
 	      804919f:       55                push   %ebp
 	      80491a0:       89 e5             mov    %esp,%ebp
 	      80491a2:       83 ec 18          sub    $0x18,%esp
 	      80491a5:       8b 45 08          mov    0x8(%ebp),%eax
 	      80491a8:       83 c0 01          add    $0x1,%eax
 	      80491ab:       83 ec 0c          sub    $0xc,%esp
 	      80491ae:       50                push   %eax
 	      80491af:       e8 eb ff ff ff    call   804919f <bar>
 	      80491b4:       83 c4 10          add    $0x10,%esp
 	      80491b7:       89 45 f4          mov    %eax,-0xc(%ebp)
 	      80491ba:       8b 45 f4          mov    -0xc(%ebp),%eax
 	      80491bd:       c9                leave  
 	      80491be:       c3                ret    

	      080491bf <bar>:
 	      80491bf:       55                push   %ebp
 	      80491c0:       89 e5             mov    %esp,%ebp
 	      80491c2:       83 ec 10          sub    $0x10,%esp
 	      80491c5:       8b 45 08          mov    0x8(%ebp),%eax
 	      80491c8:       83 c0 01          add    $0x1,%eax
 	      80491cb:       89 45 fc          mov    %eax,-0x4(%ebp)
 	      80491ce:       8b 45 fc          mov    -0x4(%ebp),%eax
 	      80491d1:       c9                leave  
 	      80491d2:       c3                ret    

	     Examine the functions 'main', 'foo' and 'bar'.

	     a) Locate the line where 'foo' calls 'bar' and explain how the
	     	caller passes the parameter to the callee. In your answer,
		clarify the concepts of calling convention and application
		binary interface.

	     b) How 'bar' returns its result to 'foo'? How does the answer
	     	relate to what you discussed in item (a)? Is it a linux-only
		thing?

	     c) Explain what is the purpose of the first two instruction and
	     	the second-to-last instruction of the function 'foo'. Give a
		didactic overview of what they do and what would happen if
		they were suppressed? Are they always necessary, or can they
		be omitted in some circumstances?

	     d) What is the purpose of the third line in both functions 'foo'
	     	and 'bar' and what does it have to do with the x86 ABI? Does it
		serve the same purpose than the third line of 'main'? Explain
		didactically how those pieces of code work.

             e) In the source code, change the return type of 'bar' to 'char'.
	     	Rebuild p3 and examine the difference in the disassembly of
		'foo'. Explain what the compiler did and, based on your answer,
		discuss why the declaration of 'foo' and 'bar' before 'main'
		are useful. 

 * p4	     How libraries work.

   	     Examine the source code of program 'p4.c' and see that all it does
	     it to call the function 'foo', implemented in the custom library
	     'libp4', which, in turn, is available in both static and dynamic
	     versions.


	     The 'Makefile' in this directory provides three forms of building
	     'p4': passing all objects explicitly to the link editor; passing
	     the static library; and passing the dynamic library. You can build
	     all three versions by running, respectively

	        make p4-v1
		make p4-v2
		make p4-v3

	     Compare the tree version with respect to the following aspects.

	     a) Execute each program like this

	        ./p4-v1
		./p4-v2
		./p4-v3

		and comment the results. Modify the Makefile so that all four
		programs produce the same desired result, no matter from where
		tey are invoked (e.g. from outside the original directory).
	       
	     b) Compare the size of all programs and explain the differences.
	     
	     c) Inspect all the programs with 'nm <program>' and discuss the
	     	differences in when and how the symbols 'foo' and 'bar' are
		listed. Tip, read the 'man page' of 'nm' and interpret the
		letters in the second column. Explain it didactically.

	     d) Inspect all the programs with 'readelf -d <program>' and discuss
	     	the differences in the library information. How the 'Shared
		library' field is used by the kernel when 'p4-v3' is loaded?

	     e) Discuss the pros and cons of both static and dynamic libraries
	     	in scenarios such as a) the executable program should be
		installed in other hosts; b) the library is updated; c) the
		library should be used by many different programs running in
		the same host.


 * dyn		Explain the differences between

   		a) static library
		b) dynamic library with relocatable code
		c) dynamic library with position-independent-code

		What are the advantages and disadvantages of each one?

 
 

 Bintools: convenience rules for inspecting binary files
 ------------------------------------------------------------
 
 SYSeg's Bintools is a collection of Makefile rules aimed as shortcut for
 invoking binary inspection utilities. It contains handy Make rules for
 disassembling objects, comparing files, creating bootable images, invoking
 platform emulators and other facilities. Some shortcuts are ad hoc rules
 crafted under poetic license and may depart from conventional Make usage.

 CONVENTIONS
 
 As a rule of thumb, a file named

     foo.bar            contains the working implementation
     foo-beta.bar	contains working but cumbersome/inelegant implementation
     foo-alpha.bar	contains incomplete or wrong implementation

 File extensions:

   -`hex`  ASCII file containing values in hexadecimal representation;

   -`asm`  manually written assembly code in Intel ASM format;

   -`S`    manually written assembly code in AT&T Gas format;

   -`s`    assembly code in AT&T Gas format generated by the compiler (gcc);

   -`o`    object code produced by the assembler;

   -`i`    pre-processed source code generated by the pre-processor (CPP)

   -`bin`  flat-binary file generated by the linker;

   -`iso`  ISO9660 (ECMA-119) file system intended for optical disk media (CD) 

   -`ld`   linker script (ld).


 Some examples allow alternative build recipes which can be selected
 by passing the command-line variable 'ALT=<number>' to 'make'. See bellow.

 NEEDED SOFTWARE

 In order to experiment with the examples in this section, the following
 pieces of software may be needed. The list indicates the lowest versions
 against which the project has been tested. Using a more recent version should
 be ok, but it is not absolutely guaranteed that results won't exhibit minor
 variations. Feedback is always appreciated.

 If required for a particular example, it is safe to use

 - Linux         5.13.0         (any decent ditribution)
 - gcc 	     	 9.3.0	        (the GNU compiler)
 - GNU binutils  2.34		(GNU assembler, linker, disassembler etc.) 
 - nasm		 2.14.02	(NASM assembler)
 - qemu		 4.2.1		(most probably qemu-system-i386)
 - gcc-multilib  9.3.0		(to compile 32-bit code in a 64-bit platform)
 - xorriso	 1.5.2-1	(depending on your computer's BIOS)
 - hexdump	 POSIX.2	(binary editor)
 
 CONVENIENCE RULES 


 * For building and inspecting binaries, use

   make					     Build the default target.

   make foo				     Build foo.

   make diss IMG=foo 			     Disassemble foo.

   	     	     			     Optionally,

					        ASM  = intel | att  (default)
						BIT  =    16 | 32   (default)

   make dump IMG=foo			     Show the raw contents of foo.
   
   make      			             Build everything (or make all)

   make clean			             Undo make all

   make diff foo bar baz		     Show graphical diff between files

   	     	     			     ASM and BIT variables apply


  * If any example involves the manipulation of a bootable image, use
  

   make run IMG=foo	             	     Run foo in the emulator

   make stick IMG=foo DEVICE=/dev/sdX        make a bootable USB stick


   SHORTCUTS

   For further convenience, the build script offers some ad hoc shortcuts:
   

   make foo/diss | foo/d		     disassemble .text as 32-bit AT&T

   make foo/diss intel|att		     disassemble as 32-bit Intel or AT&T
   make foo/diss 16|32			     disassemble as 16-bit or 32-bit
   make foo/diss intel|att 16|32	     disassemble as Intel|AT&T 16|32 bit
   make foo/diss 16|32 intel|att	     disassemble as Intel|AT&T 16|32 bit

   make foo/i16	       			     disassemble as Intel 16-bit
   make foo/a16 | foo/16  		     disassemble as AT&T  16-bit
   make foo/a32	| foo/32 | foo/a     	     disassemble as AT&T  32-bit
   make foo/i32	         | foo/i	     disassemble as Intel 32-bit

   		   			     In all disassembly rules, a
					     trailing '*' means disassemble all
					     sections, e.g. foo/d* foo/16* ...

   make foo/hex | foo/raw | foo/dump	     show raw contents in hexadecimal

   make foo/run				     test foo (mbr) with the emulator
   make foo/fd				     test foo (floppy) with the emulator

   make diffi16 | di16 | i16 foo bar baz     make diff with ASM=intel BIT=16
   make diffi32 | di32 | i32 foo bar baz     make diff with ASM=intel BIT=32
   make diffa16 | da16 | a16 foo bar baz     make diff with ASM=att BIT=16
   make diffa32 | da32 | a32 foo bar baz     make diff with ASM=att BIT=32

   make foo/stick dev    	   	     make stick IMG=foo DEVICE=dev

   make foo/l	  			     open foo in 'less' program

 

